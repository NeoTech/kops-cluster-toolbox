defaults: &defaults
  docker:
    - image: mariusv/devops-toolbox:0.1
  working_directory: ~/
  environment:
    ALLOW_TERMINATION: 1
version: 2
jobs:
  gateway:
    <<: *defaults
    steps:
      - run:
          name: "Holding for input"
          command: "echo 1"
  install:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: "Create TF state storage"
          command: |
            if [ $(aws s3 ls | grep ops.k8s.nearform.net-tf-state | wc -l) -eq 0 ]; then
            aws s3api create-bucket --bucket ${TF_STATE_STORE_BUCKET} --region ${AWS_DEFAULT_REGION} --create-bucket-configuration LocationConstraint=${AWS_DEFAULT_REGION}
            aws s3api put-bucket-versioning --bucket ${TF_STATE_STORE_BUCKET} --versioning-configuration Status=Enabled
            fi
      - run:
          name: "terraform init"
          command: "cd terraform && terraform init -backend-config=\"bucket=${TF_STATE_STORE_BUCKET}\" -backend-config=\"region=${AWS_DEFAULT_REGION}\""
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-terraform:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Terraform apply"
          command: "cd terraform && terraform apply -input=false -auto-approve"
      - run:
          name: "Extract terraform outputs"
          command: |
            mkdir -p data/{values,snippets}
            cd terraform
            terraform output nets > ../data/snippets/nets.yaml
            terraform output kops-values > ../data/values/values.yaml
            terraform output private-key > ../data/ssh-key
            terraform output kops-id > ../data/kops-username
            terraform output kops-secret > ../data/kops-password
            terraform output build-toolbox-ecr > ../data/ecr.yaml
      - store_artifacts:
          path: "~/data/ssh-key"
      - store_artifacts:
          path: "~/data/ecr.yaml"
      - store_artifacts:
          path: "~/data/kops-username"
      - store_artifacts:
          path: "~/data/kops-password"
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy-kops:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Creating kops template"
          command: |
            export KUBECONFIG=config.dummy
            kops toolbox template --template kops/cluster-template.yaml --values data/values/values.yaml --snippets data/snippets --format-yaml > cluster.yaml
      - run:
          name: "Clearing out dummy kubecfg context"
          command: |
            unset KUBECONFIG
            rm config.dummy
      - run:
          name: "Applying kops template"
          command: "kops create -f cluster.yaml"
      - run:
          name: "Waiting for kops"
          command: |
            export KUBECONFIG=~/.kube/config
            while [ 1 ]; do
              kops validate cluster --state s3://agrium-k8-kops-state-store && break || sleep 30
            done;
      - store_artifacts:
          path: "~/.kube/config"
      - persist_to_workspace:
          root: .
          paths:
            - .
  test-cluster:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Do something"
          command: "ls -l"
      - persist_to_workspace:
          root: .
          paths:
            - .
  bootstrap:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Configure RBAC for tiller"
          command: "kubectl apply -f addons/rbac/tiller.yaml"
      - run:
          name: "Helm init"
          command: "helm init --service-account tiller --history-max 20"
      - run:
          name: "Add rancher repo"
          command: "helm repo add rancher-stable https://releases.rancher.com/server-charts/stable"
      - run:
          name: "Update helm "
          command: "helm repo update"
      - run:
          name: "cert-manager CRD deployment"
          command: "kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.9/deploy/manifests/00-crds.yaml"
      - run:
          name: "deploy cert-manager"
          command: "helm upgrade --install cert-manager jetstack/cert-manager -f addons/cert-manager/values.yaml --version v0.9.1 --namespace kube-system --wait"
      - run:
          name: "Deploy issuer"
          command: "kubectl apply -f addons/cert-manager/issuer.yaml -n kube-system"
      - run:
          name: "make sure cert-manager is running"
          command: "kubectl wait --for=condition=available --timeout=180s deployment/cert-manager -n kube-system"
      - run:
          name: "deploy rancher"
          command: "helm install rancher-stable/rancher --name rancher --namespace cattle-system --set hostname=rancher.k8s.nearform.net"
      - persist_to_workspace:
          root: .
          paths:
            - .
  decomission-kops:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Destroy Kops"
          command: "ls -l"
      - persist_to_workspace:
          root: .
          paths:
            - .
  decomission-terraform:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "terraform destroy"
          command: "cd terraform && terraform destroy -iput=false -auto-approve"
      - persist_to_workspace:
          root: .
          paths:
            - .
  cleanup:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Install Helm"
          command: "ls -l"
      - run:
          name: "Do magic"
          command: "ls -l"
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  version: 2
  infrastructure-destroy:
    jobs:
      - gateway:
          type: approval
      - install:
          requires:
            - gateway
      - decomission-kops:
          requires:
            - install
      - decomission-terraform:
          requires:
            - decomission-kops
      - cleanup:
          requires:
            - decomission-terraform
  infrastructure-deploy:
    jobs:
      - gateway:
          type: approval
      - install:
          requires:
            - gateway
      - deploy-terraform:
          requires:
            - install
      - deploy-kops:
          requires:
            - deploy-terraform
      - test-cluster:
          requires:
            - install
            - deploy-terraform
            - deploy-kops
      - bootstrap:
          requires:
            - test-cluster
